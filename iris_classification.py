# -*- coding: utf-8 -*-
"""Iris classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QD7KDB58K_0jph1Xe5NcecV1VDcZT6Jk
"""

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/Iris.csv")

df.head()

df=df.drop(columns=['Id'])

df.describe()

df.info()

df['Species'].value_counts()

df.isnull().sum()

df['SepalLengthCm'].hist()

df['SepalWidthCm'].hist()

df['PetalLengthCm'].hist()

df['PetalWidthCm'].hist()

df['SepalLengthCm'].hist()

colors=['red','yellow','orange']
species=['Iris-virginica','Iris-versicolor','Iris-setosa']

for i in range(3):
  x=df[df['Species']==species[i]]
  plt.scatter(x['SepalLengthCm'],x['SepalWidthCm'],c=colors[i],label=species[i])
  plt.xlabel("Length of Sepal")
  plt.ylabel("Width of Sepal")
  plt.legend()

for i in range(3):
  x=df[df['Species']==species[i]]
  plt.scatter(x['PetalLengthCm'],x['PetalWidthCm'],c=colors[i],label=species[i])
  plt.xlabel("Length of Petal")
  plt.ylabel("Width of Petal")
  plt.legend()

for i in range(3):
  x=df[df['Species']==species[i]]
  plt.scatter(x['SepalLengthCm'],x['PetalLengthCm'],c=colors[i],label=species[i])
  plt.xlabel("Length of Petal")
  plt.ylabel("Width of Petal")
  plt.legend()

for i in range(3):
  x=df[df['Species']==species[i]]
  plt.scatter(x['SepalWidthCm'],x['PetalLengthCm'],c=colors[i],label=species[i])
  plt.xlabel("Length of Petal")
  plt.ylabel("Width of Petal")
  plt.legend()

df_numeric = df.select_dtypes(include=[np.number])
correlation_matrix = df_numeric.corr()
print(correlation_matrix)

fig,ax=plt.subplots(figsize=(5,5 ))
sns.heatmap(correlation_matrix,annot=True,ax=ax)

from sklearn.preprocessing import LabelEncoder
label=LabelEncoder()

df['Species']=label.fit_transform(df['Species'])
df.head()

from sklearn.model_selection import train_test_split

"""X=df.drop(columns=['Species'])
Y=df['Species']
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.30)
"""

from sklearn.linear_model import LogisticRegression
LR=LogisticRegression()

LR.fit(x_train,y_train)

print("Accuracy :",LR.score(x_test,y_test)*100)

from sklearn.tree import DecisionTreeClassifier
Dc=DecisionTreeClassifier()

Dc.fit(x_train,y_train)

print("Accuracy :",LR.score(x_test,y_test)*100)